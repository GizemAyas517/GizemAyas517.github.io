{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["blueCard","pinkCard","greenCard","myShakeEvent","Shake","threshold","timeout","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentArray","tick","start","_this2","window","addEventListener","shakeEventDidOccur","_this3","removeEventListener","stop","length","setState","alert","color","_this4","react_default","a","createElement","className","onClick","cardClick","id","buttonClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAIMA,EAAW,CAAC,qBAAsB,qBAAsB,sBACxDC,EAAW,CAAC,qBAAsB,qBAAsB,sBACxDC,EAAY,CAAC,sBAAuB,sBAAuB,uBAE3DC,EAAe,WAAIC,GAAM,CAC3BC,UAAW,GACXC,QAAS,MA+FEC,cAzFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACbE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,aAAcjB,EACdkB,KAAM,GAEVf,EAAagB,QANEV,mFASC,IAAAW,EAAAR,KAChBS,OAAOC,iBAAiB,QAAS,kBAAMF,EAAKG,uBAAsB,kDAGhD,IAAAC,EAAAZ,KAClBS,OAAOI,oBAAoB,QAAS,kBAAMD,EAAKD,uBAAsB,GACrEpB,EAAauB,oDAIb,GAAId,KAAKI,MAAME,OAASN,KAAKI,MAAMC,aAAaU,OAAS,EAIrD,OAHAf,KAAKgB,SAAS,CACVV,KAAM,IAEHW,MAAM,yCAGjBjB,KAAKgB,SAAS,CACVV,KAAMN,KAAKI,MAAME,KAAO,sCAKtBY,GACM,SAAVA,EACAlB,KAAKgB,SAAS,CACVX,aAAchB,EACdiB,KAAM,IAEO,UAAVY,EACPlB,KAAKgB,SAAS,CACVX,aAAcf,EACdgB,KAAM,IAEO,SAAVY,GACPlB,KAAKgB,SAAS,CACVX,aAAcjB,EACdkB,KAAM,0CAMZ,GAAIN,KAAKI,MAAME,OAASN,KAAKI,MAAMC,aAAaU,OAAS,EAIrD,OAHAf,KAAKgB,SAAS,CACVV,KAAM,IAEHW,MAAM,yCAGjBjB,KAAKgB,SAAS,CACVV,KAAMN,KAAKI,MAAME,KAAO,qCAKvB,IAAAa,EAAAnB,KAEP,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAML,EAAKM,UAAU,SAASF,UAAU,MAAMG,GAAG,SAElEN,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAML,EAAKM,UAAU,SAASF,UAAU,MAAMG,GAAG,SAElEN,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAML,EAAKM,UAAU,UAAUF,UAAU,MAAMG,GAAG,WAGrEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,SAAItB,KAAKI,MAAMC,aAAaL,KAAKI,MAAME,QAEzCc,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeC,QAAS,kBAAML,EAAKQ,gBAArD,mBApFQC,aCDEC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4f834ad9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Shake from 'shake.js'\n\nconst blueCard = [\"Sample blue item 1\", \"Sample blue item 2\", \"Sample blue item 3\"];\nconst pinkCard = [\"Sample pink item 1\", \"Sample pink item 2\", \"Sample pink item 3\"];\nconst greenCard = [\"Sample green item 1\", \"Sample green item 2\", \"Sample green item 3\"];\n\nconst myShakeEvent = new Shake({\n    threshold: 15, // optional shake strength threshold\n    timeout: 1000 // optional, determines the frequency of event generation\n});\n\nclass App extends Component {\n\n\n  constructor(props) {\n        super(props);\n        this.state = {\n          currentArray: blueCard,\n          tick: 0,\n        };\n      myShakeEvent.start();\n  }\n\n  componentDidMount() {\n      window.addEventListener('shake', () => this.shakeEventDidOccur(), false);\n  }\n\n  componentWillUnmount(){\n      window.removeEventListener('shake', () => this.shakeEventDidOccur(), false);\n      myShakeEvent.stop();\n  }\n\n  shakeEventDidOccur() {\n      if (this.state.tick === this.state.currentArray.length - 1){\n          this.setState({\n              tick: 0\n          });\n          return alert(\"You have reached the end of the cards\");\n      }\n\n      this.setState({\n          tick: this.state.tick + 1\n      });\n  }\n\n\n  cardClick(color){\n    if (color === \"pink\"){\n        this.setState({\n            currentArray: pinkCard,\n            tick: 0\n        });\n    } else if (color === \"green\"){\n        this.setState({\n            currentArray: greenCard,\n            tick: 0\n        });\n    } else if (color === \"blue\") {\n        this.setState({\n            currentArray: blueCard,\n            tick: 0\n        });\n    }\n  }\n\n  buttonClick(){\n      if (this.state.tick === this.state.currentArray.length - 1){\n          this.setState({\n              tick: 0\n          });\n          return alert(\"You have reached the end of the cards\");\n      }\n\n      this.setState({\n          tick: this.state.tick + 1\n      });\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"box-container\">\n            <button onClick={() => this.cardClick(\"blue\")} className=\"box\" id=\"blue\">\n            </button>\n            <button onClick={() => this.cardClick(\"pink\")} className=\"box\" id=\"pink\">\n            </button>\n            <button onClick={() => this.cardClick(\"green\")} className=\"box\" id=\"green\">\n            </button>\n          </div>\n          <div className=\"displayed-card\">\n            <p>{this.state.currentArray[this.state.tick]}</p>\n          </div>\n          <button className=\"shake-button\" onClick={() => this.buttonClick()}>Shake!</button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}