{"version":3,"sources":["components/question/question.js","components/graph/graph.js","components/testCoverage/testCoverage.js","components/welcome/welcome.js","App.js","serviceWorker.js","index.js"],"names":["Question","react_default","a","createElement","className","href","target","rel","Component","MyGraph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showInput","state","inputState","setState","open","length","nodes","i","id","label","color","Math","random","toString","slice","toUpperCase","_this2","theGraph","getNodes","edges","from","to","lib_default","graph","options","layout","hierarchical","height","events","select","event","Button_default","onClick","aria-controls","aria-expanded","Collapse_default","in","TestCoverage","ListGroup_default","variant","Item","action","Welcome","App","showQuestion","activeComponent","showGraph","showTest","myComponent","welcome_welcome","question_question","graph_graph","testCoverage_testCoverage","integrity","crossOrigin","Nav_default","defaultActiveKey","Link","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+VAuBeA,kMAlBP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,6CACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,qIACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,gGACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,6EACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,wBAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,oGACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,oGAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,mEAAqFH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,kDAAkDC,OAAO,SAASC,IAAI,uBAA9E,QAArF,aAbOC,6ECsHRC,cAjHX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,UAAY,WACqB,IAAzBP,EAAKQ,MAAMC,WACXT,EAAKU,SAAS,CAACD,WAAW,IACM,IAAzBT,EAAKQ,MAAMC,YAClBT,EAAKU,SAAS,CAACD,WAAW,KAT9BT,EAAKQ,MAAQ,CACTG,MAAK,GAHKX,wEAeTY,GAGL,IADA,IAAIC,EAAQ,GACHC,EAAE,EAAGA,EAAEF,EAAQE,IACpBD,EAAMC,GAAK,CAACC,GAAGD,EAAGE,MAAM,QAAQF,EAAGG,MAAM,IAAMC,KAAKC,SAASC,SAAS,IAAIC,MAAM,EAAG,GAAGC,eAE1F,OAAOT,mCAGF,IAAAU,EAAApB,KACGQ,EAASR,KAAKK,MAAdG,KAEJa,EAAW,CACXX,MAAOV,KAAKsB,SAAS,IACtBC,MAAO,CACH,CAACC,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,EAAIC,GAAI,IACd,CAACD,KAAK,EAAIC,GAAI,IACd,CAACD,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,EAAIC,GAAI,IACd,CAACD,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,EAAIC,GAAI,GACd,CAACD,KAAK,GAAKC,GAAI,IACf,CAACD,KAAK,EAAIC,GAAI,IACd,CAACD,KAAK,GAAKC,GAAI,GACf,CAACD,KAAK,EAAIC,GAAI,IACd,CAACD,KAAK,GAAKC,GAAI,MAoBtB,OACItC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,kBACAH,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,CAAOuC,MAAON,EAAUO,QAlBlB,CACVC,OAAQ,CACJC,cAAc,GAElBP,MAAO,CACHT,MAAO,WAEXiB,OAAQ,SAWsCC,OARrC,CACTC,OAAQ,SAASC,GACUA,EAAjBxB,MAAiBwB,EAAVX,UAObpC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,0IACAH,EAAAC,EAAAC,cAAC8C,EAAA/C,EAAD,CACIgD,QAAS,kBAAMhB,EAAKb,SAAS,CAAEC,MAAOA,KACtC6B,gBAAc,wBACdC,gBAAe9B,GAHnB,wBAOArB,EAAAC,EAAAC,cAACkD,EAAAnD,EAAD,CAAUoD,GAAIxC,KAAKK,MAAMG,MACrBrB,EAAAC,EAAAC,cAAA,OAAKuB,GAAG,yBACJzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,QACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,QACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,QACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,SACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,QACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,QACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,QACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,oBAzGNI,uCCiBP+C,mLAhBP,OACItD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CAAWuD,QAAQ,SACfxD,EAAAC,EAAAC,cAACqD,EAAAtD,EAAUwD,KAAX,CAAgBC,QAAM,GAAtB,gCACA1D,EAAAC,EAAAC,cAACqD,EAAAtD,EAAUwD,KAAX,CAAgBC,QAAM,GAAtB,yCACA1D,EAAAC,EAAAC,cAACqD,EAAAtD,EAAUwD,KAAX,CAAgBC,QAAM,GAAtB,oEACA1D,EAAAC,EAAAC,cAACqD,EAAAtD,EAAUwD,KAAX,CAAgBC,QAAM,GAAtB,uGACA1D,EAAAC,EAAAC,cAACqD,EAAAtD,EAAUwD,KAAX,CAAgBC,QAAM,GAAtB,0GATOnD,8BCWZoD,2LAXP,OACI3D,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,oCAJUI,cC4DPqD,cArDb,SAAAA,EAAYnD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+C,IAChBlD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiD,GAAA5C,KAAAH,KAAMJ,KAMRoD,aAAe,WACbnD,EAAKU,SAAS,CAAC0C,gBAAgB,cARfpD,EAWlBqD,UAAY,WACRrD,EAAKU,SAAS,CAAC0C,gBAAgB,WAZjBpD,EAelBsD,SAAW,WACLtD,EAAKU,SAAS,CAAC0C,gBAAgB,UAdnCpD,EAAKQ,MAAQ,CACX4C,gBAAiB,WAHHpD,wEAqBf,IAAIuD,EAAcjE,EAAAC,EAAAC,cAACgE,EAAD,MAQnB,MAPmC,aAA/BrD,KAAKK,MAAM4C,gBACbG,EAAcjE,EAAAC,EAAAC,cAACiE,EAAD,MAC0B,UAA/BtD,KAAKK,MAAM4C,gBAClBG,EAAcjE,EAAAC,EAAAC,cAACkE,EAAD,MACwB,SAA/BvD,KAAKK,MAAM4C,kBAClBG,EAAcjE,EAAAC,EAAAC,cAACmE,EAAD,OAIhBrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,QACII,IAAI,aACJF,KAAK,wEACLkE,UAAU,0EACVC,YAAY,cAGhBvE,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CAAKwE,iBAAiB,QAAQtE,UAAU,eACpCH,EAAAC,EAAAC,cAACsE,EAAAvE,EAAIyE,KAAL,CAAUzB,QAASpC,KAAKgD,cAAxB,YACA7D,EAAAC,EAAAC,cAACsE,EAAAvE,EAAIyE,KAAL,CAAUzB,QAASpC,KAAKkD,WAAxB,gBACA/D,EAAAC,EAAAC,cAACsE,EAAAvE,EAAIyE,KAAL,CAAUzB,QAASpC,KAAKmD,UAAxB,sBAENhE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACV8D,WA9CK1D,aCGEoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b35328dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './question.css';\n\nclass Question extends Component {\n    render() {\n        return (\n            <div>\n                <h1 className=\"quest-title\">How much does it cost to meet Emma Stone?</h1>\n                <p className=\"quest\">I am throwing a party to meet Emma Stone. I can invite as many friends as I want to. For each person I invite, I am paying 20 TL.</p>\n                <p className=\"quest\">I am giving you a list of my social network. Each line represents the friends of my friends.</p>\n                <p className=\"quest\">What is the minimum number of people I need to invite to meet Emma Stone?</p>\n                <p className=\"quest\">Here are some rules:</p>\n\n                <p className=\"quest\">Each person who is directly friends with me and are invited to the party is coming to the party.</p>\n                <p className=\"quest\">Each invited person whose 1st degree friend is coming to the party, is also coming to the party.</p>\n\n                <p className=\"quest\">You can download the input data \"facebook_combined.txt.gz\" from <a href=\"http://snap.stanford.edu/data/ego-Facebook.html\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</p>\n            </div>\n        );\n\n    }\n}\n\nexport default Question;","import React, { Component, } from 'react';\nimport './graph.css';\nimport Graph from 'react-graph-vis';\nimport Collapse from \"react-bootstrap/Collapse\";\nimport Button from \"react-bootstrap/Button\";\n\nclass MyGraph extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            open:false\n        }\n    }\n\n    showInput = () => {\n        if (this.state.inputState ===0){\n            this.setState({inputState:1});\n        } else if (this.state.inputState ===1){\n            this.setState({inputState:0});\n        }\n    };\n\n    getNodes(length) {\n        // define the nodes array\n        let nodes = [];\n        for (let i=0; i<length; i++){\n            nodes[i] = {id:i, label:\"Node \"+i, color:'#' + Math.random().toString(16).slice(2, 8).toUpperCase()}\n        }\n        return nodes;\n    }\n\n    render() {\n        const { open } = this.state;\n\n        let theGraph = {\n            nodes: this.getNodes(15),\n           edges: [\n               {from:0 , to: 1},\n               {from:0 , to: 2},\n               {from:0 , to: 3},\n               {from:0 , to: 4},\n               {from:0 , to: 5},\n               {from:0 , to: 6},\n               {from:2 , to: 7},\n               {from:0 , to: 9},\n               {from:6 , to: 10},\n               {from:1 , to: 10},\n               {from:3 , to: 9},\n               {from:3 , to: 11},\n               {from:4 , to: 5},\n               {from:5 , to: 8},\n               {from:5 , to: 6},\n               {from:11 , to: 13},\n               {from:9 , to: 14},\n               {from:14 , to: 8},\n               {from:7 , to: 13},\n               {from:13 , to: 12},\n            ]\n\n        };\n\n        let options = {\n            layout: {\n                hierarchical: false\n            },\n            edges: {\n                color: \"#ffffff\"\n            },\n            height: \"600px\",\n        };\n\n        let events = {\n            select: function(event) {\n                let { nodes, edges } = event;\n            }\n        };\n        return (\n            <div className=\"graph-container\">\n                <p className=\"graph-title\">Sample Network</p>\n                <Graph graph={theGraph} options={options} events={events} />\n                <p className=\"graph\">The graph above represents a sample social network. I am Node 0, lets find how many people I need to invite at minimum to meet Node 8.</p>\n                <Button\n                    onClick={() => this.setState({ open: !open })}\n                    aria-controls=\"example-collapse-text\"\n                    aria-expanded={open}\n                >\n                    Click for the edges!\n                </Button>\n                <Collapse in={this.state.open}>\n                    <div id=\"example-collapse-text\">\n                        <div className=\"graph-input\">\n                            <p className=\"graph-edges\">0 1</p>\n                            <p className=\"graph-edges\">0 2</p>\n                            <p className=\"graph-edges\">0 3</p>\n                            <p className=\"graph-edges\">0 4</p>\n                            <p className=\"graph-edges\">0 5</p>\n                            <p className=\"graph-edges\">0 6</p>\n                            <p className=\"graph-edges\">2 7</p>\n                            <p className=\"graph-edges\">0 9</p>\n                            <p className=\"graph-edges\">6 10</p>\n                            <p className=\"graph-edges\">1 10</p>\n                            <p className=\"graph-edges\">3 9</p>\n                            <p className=\"graph-edges\">3 11</p>\n                            <p className=\"graph-edges\">4 5</p>\n                            <p className=\"graph-edges\">5 8</p>\n                            <p className=\"graph-edges\">5 6</p>\n                            <p className=\"graph-edges\">11 13</p>\n                            <p className=\"graph-edges\">9 14</p>\n                            <p className=\"graph-edges\">14 8</p>\n                            <p className=\"graph-edges\">7 13</p>\n                            <p className=\"graph-edges\">13 12</p>\n                        </div>\n                    </div>\n                </Collapse>\n            </div>\n        );\n\n    }\n}\n\nexport default MyGraph;","import React, { Component } from 'react';\nimport './testCoverage.css';\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\n\nclass TestCoverage extends Component {\n    render() {\n        return (\n            <div className=\"test-cover\">\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item action>Check if the input is valid.</ListGroup.Item>\n                    <ListGroup.Item action>Check if the input is read correctly.</ListGroup.Item>\n                    <ListGroup.Item action>Check whether the data structure the input is put into is valid.</ListGroup.Item>\n                    <ListGroup.Item action>Check whether your function actually finds the right people who connects the source and the target.</ListGroup.Item>\n                    <ListGroup.Item action>Check whether your function actually finds the minimum number of people needed for the party.</ListGroup.Item>\n                </ListGroup>\n\n            </div>\n        );\n\n    }\n}\n\nexport default TestCoverage;","import React, { Component } from 'react';\nimport \"./welcome.css\"\n\nclass Welcome extends Component {\n    render(){\n        return(\n            <div>\n            <p className=\"welcomeMessage\">\n         Welcome to the katathon!\n        </p>\n            </div>\n        );\n    }\n\n}\n\nexport default Welcome;\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Question from \"./components/question/question\";\nimport MyGraph from \"./components/graph/graph\";\nimport TestCoverage from \"./components/testCoverage/testCoverage\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Welcome from \"./components/welcome/welcome\";\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      activeComponent: \"welcome\"\n    }\n  }\n\n  showQuestion = () => {\n    this.setState({activeComponent:\"question\"})\n  };\n\n  showGraph = () => {\n      this.setState({activeComponent:\"graph\"})\n  };\n\n  showTest = () => {\n        this.setState({activeComponent:\"test\"})\n  };\n\n\n  render() {\n     let myComponent = <Welcome/>;\n    if (this.state.activeComponent === \"question\"){\n      myComponent = <Question/>;\n    } else if (this.state.activeComponent === \"graph\") {\n        myComponent = <MyGraph/>;\n    } else if (this.state.activeComponent === \"test\") {\n        myComponent = <TestCoverage/>;\n    }\n    return (\n\n      <div className=\"App-header\">\n          <link\n              rel=\"stylesheet\"\n              href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n              integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n              crossOrigin=\"anonymous\"\n          />\n\n          <Nav defaultActiveKey=\"/home\" className=\"flex-column\">\n              <Nav.Link onClick={this.showQuestion}>Question</Nav.Link>\n              <Nav.Link onClick={this.showGraph}>Sample Graph</Nav.Link>\n              <Nav.Link onClick={this.showTest}>Sample Test Cases</Nav.Link>\n          </Nav>\n        <div className=\"right-pane\">\n            {myComponent}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}