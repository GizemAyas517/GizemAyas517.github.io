{"version":3,"sources":["components/welcome/welcome.js","components/tdd/tdd.js","components/domain/domain.js","components/frameworks/frameworks.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","react_default","a","createElement","className","src","alt","width","Component","TDD","Domain","Frameworks","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showTDD","setState","activeComponent","showDomain","showFrameworks","state","myComponent","welcome_welcome","tdd_tdd","domain_domain","frameworks_frameworks","rel","href","integrity","crossOrigin","Nav_default","defaultActiveKey","Link","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca8181f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./welcome.css\"\n\nclass Welcome extends Component {\n    render(){\n        return(\n            <div>\n            <p className=\"welcomeMessage\">\n            Deloitte Digital - JUG Istanbul Domain Story Telling etkinliğine hoşgeldiniz!\n            </p>\n                <img src=\"https://media.giphy.com/media/heIX5HfWgEYlW/giphy.gif\" alt=\"\" width=\"480px\"/>\n            </div>\n        );\n    }\n\n}\n\nexport default Welcome;\n\n\n","import React, { Component } from 'react';\nimport './tdd.css';\n\nclass TDD extends Component {\n    render() {\n        return (\n            <div>\n                <h1 className=\"tdd-title\">Test Driven Development</h1>\n                <p className=\"tdd-definition\">Test-driven development (TDD) (Beck 2003; Astels 2003), is an evolutionary approach to development which combines test-first development where you write a test before you write just enough production code to fulfill that test and refactoring.</p>\n                <p className=\"tdd-definition\">A significant advantage of TDD is that it enables you to take small steps when writing software. </p>\n                <p className=\"tdd-red\">\n                    RED. First write a unit test in failure.\n                </p>\n                <p className=\"tdd-green\">\n                    GREEN. Write as soon as possible the production code sufficient to pass this unit test even if it means allowing the “worst” solutions. Of course if a clean and simple solution appears immediately, it must be realized but otherwise it is not serious the code will be improved incrementally during the refactoring phases. The aim here is to obtain as soon as possible the green bar of success of the unit tests.\n                </p>\n                <p className=\"tdd-refactor\">\n                    REFACTOR. This phase is often neglected but is essential because it eliminates possible code duplications but also makes it possible to make changes in architecture, factorization, presentation… This refactoring concerns both the production code and the test code and must not modify the external behavior of the program, which is materialized by a test execution bar that remains green.\n                </p>\n                <div className=\"references\">\n                    <p>References</p>\n                    <ul>\n                        <li>\n                            <p>https://hackernoon.com/introduction-to-test-driven-development-tdd-61a13bc92d92</p>\n                        </li>\n                        <li>\n                            <p>http://agiledata.org/essays/tdd.html</p>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        );\n\n    }\n}\n\nexport default TDD;","import React, { Component } from 'react';\nimport './domain.css';\n\nclass Domain extends Component {\n    render() {\n        return (\n            <div>\n                <h1 className=\"domain-title\">Otel Domain'i</h1>\n                <p className=\"domain-regular\"></p>\n                <p className=\"domain-regular\"></p>\n            </div>\n        );\n\n    }\n}\n\nexport default Domain;","import React, { Component } from 'react';\nimport './frameworks.css';\n\nclass Frameworks extends Component {\n    render() {\n        return (\n            <div>\n                <h1 className=\"frameworks-title\">Test Frameworks</h1>\n                <div className=\"frameworks-p\">\n                    <p>Java</p>\n                    <ul>\n                        <li>JUnit</li>\n                    </ul>\n                </div>\n                <div className=\"frameworks-p\">\n                    <p>Javascript</p>\n                    <ul>\n                        <li>Mocha</li>\n                        <li>Jest : https://jestjs.io/</li>\n                    </ul>\n                </div>\n                <div className=\"frameworks-p\">\n                    <p>Python</p>\n                    <ul>\n                        <li>unittest for Python2 : https://docs.python.org/2/library/unittest.html</li>\n                        <li>unittest for Python3 : https://docs.python.org/3/library/unittest.html</li>\n                        <li>Pytest : https://www.tutorialspoint.com/pytest/index.htm</li>\n                    </ul>\n                </div>\n            </div>\n        );\n\n    }\n}\n\nexport default Frameworks;","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from \"react-bootstrap/Nav\";\nimport Welcome from \"./components/welcome/welcome\";\nimport TDD from \"./components/tdd/tdd\";\nimport Domain from \"./components/domain/domain\";\nimport Frameworks from \"./components/frameworks/frameworks\";\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      activeComponent: \"welcome\"\n    }\n  }\n  \n  /* \n\n  BELOW WAS USED IN INTERNAL KATATHON\n  showQuestion = () => {\n    this.setState({activeComponent:\"question\"})\n  };\n\n  showGraph = () => {\n      this.setState({activeComponent:\"graph\"})\n  };\n\n  showTest = () => {\n        this.setState({activeComponent:\"test\"})\n  };\n  */\n\n  showTDD = () => {\n    this.setState({activeComponent: \"tdd\"});\n  }\n  showDomain = () => {\n    this.setState({activeComponent: \"domain\"});\n  }\n\n  showFrameworks = () => {\n    this.setState({activeComponent: \"frameworks\"});\n  }\n\n\n\n  render() {\n     let myComponent = <Welcome/>;\n     /*\n      if (this.state.activeComponent === \"question\"){\n        myComponent = <Question/>;\n      } else if (this.state.activeComponent === \"graph\") {\n          myComponent = <MyGraph/>;\n      } else if (this.state.activeComponent === \"test\") {\n          myComponent = <TestCoverage/>;\n          \n      } else */\n      if (this.state.activeComponent === \"tdd\") {\n        myComponent = <TDD/>;\n      } else if (this.state.activeComponent === \"domain\") {\n        myComponent = <Domain/>;\n      } else if (this.state.activeComponent === \"frameworks\") {\n        myComponent = <Frameworks/>;\n      }\n    return (\n\n      <div className=\"App-header\">\n          <link\n              rel=\"stylesheet\"\n              href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n              integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n              crossOrigin=\"anonymous\"\n          />\n\n          <Nav defaultActiveKey=\"/home\" className=\"flex-column\">\n              <Nav.Link className=\"barButton\" onClick={this.showTDD}>TDD</Nav.Link>\n              <Nav.Link className=\"barButton\" onClick={this.showFrameworks}>Frameworks</Nav.Link>\n          </Nav>\n        <div className=\"right-pane\">\n            {myComponent}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}