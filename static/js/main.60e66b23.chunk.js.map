{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pinkCard","title","description","blueCard","greenCard","myShakeEvent","Shake","threshold","timeout","shuffle","inputArray","input","i","length","randomIndex","Math","floor","random","itemAtIndex","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentArray","tick","start","_this2","window","addEventListener","shakeEventDidOccur","_this3","removeEventListener","stop","setState","alert","color","_this4","react_default","a","createElement","className","onClick","cardClick","id","buttonClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60e66b23.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Shake from 'shake.js'\n\nconst pinkCard = [\n  {title:\"Yeniden İfade Et\", description:\"Konuyu bir problem olarak tanımla ve bu problemi 5 farklı şekilde dile getirmeye çalış.\"},\n  {title:\"Kendi Tecrüben\", description:\"Konuyla ilgili kendi yaşadığın bir örneğin hikayesini anlat.\"},\n  {title:\"5N1K Ne? Nerede? Ne zaman? Neden? Nasıl? Kim?\", description:\"Konunun çerçevesini belirlemek için bu başlıkların altına, aklına gelen ilk kelimeleri listele ve takım arkadaşlarına tartış.\"},\n  {title:\"Rol Yapma Zamanı\", description:\"İçindeki aktörü serbest bırak. Takım içinde eşleşerek değerlendirdiğiniz durumu inceleyen bir çift olduğunuzu düşünün ve konuşmaya başlayın. Takım içinden bir başkası önemli noktaları not almalı.\"},\n  {title:\"Beş Baş Ağrısı\", description:\"Tamamen önyargıların ve kişisel düşüncelerin dahilinde konuyla ilgili beş tane problemi 100 saniye içinde yaz. Tüm takım arkadaşlarınla paylaş, ortak noktaları belirle ve tartış.\"},\n  {title:\"Kendi Tecrüben\", description:\"Konuyla ilgili kendi yaşadığın bir örneğin hikayesini anlat.\"},\n  {title:\"Söz-lük\", description:\"Temanın odak kelimesini bildiğin tüm dillerde sözlükte arayıp köklerine in.\"},\n  {title:\"Tarihi Örnekler\", description:\"Konuyla ilgili tarihsel örnekleri, dönüm noktalarını, trendleri ve öne çıkan karakterleri bulmaya çalış.\"},\n  {title:\"Vesikalık\", description:\"Konuyla ilişkili farklı karakterleri çizip isimlendir. Arketipler, stereotipler ya da spesifik insanları kullanabilirsin. Mesela anne-baban, gözlüklü mühendis, Instagram ünlüsü bir kişi gibi...Bu kişilerin konuyla ilgili tutum ve davranışlarını canlandır.\"},\n  {title:\"Kazananlar & Kaybedenler\", description:\"Kimler birşeyler kazanırken kimler kaybediyor?\"},\n  {title:\"Masal Vakti\", description:\"Konuyla ilgili kişisel bir anektodunu abartarak anlat.\"},\n  {title:\"Anahtar İsimler\", description:\"Tarihte kimlerin bu konuda bir etkisi oldu? Günümüzde kim bu konuyu sahipleniyor? Gelecekte kim bu işi sürükler?\"},\n];\nconst blueCard = [\n  {title:\"Titreyen Nağmeler\", description:\"İşin içinde hangi duygular var? 3 tane çıkartabilirsin sanki!\"},\n  {title:\"Batman & Joker\", description:\"Her hikayede bir iyi bir de kötü kahraman vardır. Bu durum/problem için bu kahramanlar mevcut mu? Her ikisi için de takımca 5 karakter ve 5 dış görünüş özelliği belirleyin.\"},\n  {title:\"Yeni & Eski\", description:\"Problemi 'Eskiden olsaydı...' ve 'Günümüzde...' şeklinde ifade et. Değişimin sebepleri neler olabilir?\"},\n  {title:\"Yer Değiştir\", description:\"Kendini görüştüğün kişilerden birisinin yerinde hayal et. Davranışlarında nasıl bir değişiklik olacaktır? Sence bu değişiklikler olumlu değişiklikler mi?\"},\n  {title:\"Metafor\", description:\"Konuyla, süreçle, araçlarla ilgili bir metafor bulmaya/oluşturmaya çalış. Bilgisayar ana ekran zemininin 'masaüstü' olması, önemli kişilere 'anahtar kişiler' denilmesi gibi.\"},\n  {title:\"Kökenine İn\", description:\"Araştırmanızda karşılaştığınız problemler/süprizler neden kaynaklanıyor olabilir? Herkes olası 3 sebebi listelesin ve takım ile paylaşsın.\"},\n  {title:\"Elmalar - Armutlar\", description:\"Araştırma sürecinde incelediğiniz kartlardan birini seç. Tüm grubun ortak fikri olan noktalar nelerdi? Hangi konularda ayrıştınız? Bu benzerlikler ve farklılıklar neden önemli olabilir?\"},\n  {title:\"Tadı tavuk gibi\", description:\"Bu durum/problemi çağrıştıran birer obje, insan, deneyim, marka, mekan tanımla.\"},\n  {title:\"Çizgiler & Oklar\", description:\"Durumun akışıyla ilgili bir diyagram çiz. Kişiler, olaylar, araçlar, mekanlar ve bunların birbirileriyle olan etkileşimini çizimle anlatmaya çalış.\"},\n  {title:\"Zaman Çizelgesi\", description:\"Tanımladığın durum ya da sorun ile ilgili bir zaman çizelgesi oluşturabilir misin? Anahtar olayları, sebeplerini ve sonuçlarını çizelgeye yerleştirmeye çalış.\"},\n  ];\nconst greenCard = [\n  {title:\"_____ Olsa Ne Yapardı?\", description:\"Politikacılar, Rock Yıldızları, Annen... Onlar bu durumda bir aktör (örn. firma yetkilisi ya da müşteri) olsalardı ne şekilde davranırlardı?\"},\n  {title:\"Geleceğe Dönüş\", description:\"25 hatta 100 sene sonra bu durum ne şekilde değişiklik gösterebilir? Neden?\"},\n  {title:\"Ortaya Karışık\", description:\"Birbirine en uzak iki fikri ele al ve karıştır. Ortaya çıkan yeni bulgular, sorunlar, çözümler neler?\"},\n  {title:\"Kısıtlardan Birini Yoket.\", description:\"Tanımladığın durum içinde mutlaka olacağını öngördüğün bir eylem gerçekleşmezse, bir kişi bulunmazsa, bir ortam oluşmazsa, bir araca ulaşılamazsa neler olurdu?\"},\n  {title:\"Başarısızlığın Acı Tadı\", description:\"Durumu nasıl daha kötü bir hale sokabilirsin? Nasıl bir çözüm üretirsen kesin başarısızlıkla sonuçlanır?\"},\n  {title:\"Çocuktan Al Haberi\", description:\"Konuya yaklaşımını, çözümünü ya da tanımladığın problemi bir çocuğa anlaşılır şekilde anlat. Yüzyüze görüşme şansınız yoksa telefon et. Yorumları nedir?\"},\n  {title:\"Ah Bir Zengin Olsam\", description:\"Eğer elinde sınırsız maddi imkanlar olsaydı neler yapardın?\"},\n  {title:\"Anahtar İlkeler\", description:\"Şimdiye kadar ortaya çıkan fikirleri gözden geçir. Ortak alanlar görüyor musun? Bunları takımının anahtar ilkeleri olarak listele.\"},\n  {title:\"10 Gerçek\", description:\"Durumla ilgili değişmeyeceğini düşündüğün 10 olguyu tanımla.\"},\n  {title:\"180°\", description:\"Çözümünde eğer şartlar tam tersi olsaydı neler değişirdi?\"},\n  {title:\"Serbest Çağrışım\", description:\"Çevrene bak, rastgele 5 öğe seç ve bunları konuya bağlamaya çalış.\"},\n  {title:\"Büyük Balık Küçük Balık\", description:\"Şu anda herhangi bir sektörde hizmet veren en büyük 3 kurumu düşünün. Bu kurum sizinle aynı hizmeti veriyor olsaydı rekabet için ne yapardı?\"},\n  {title:\"Retrofit\", description:\"Mevcut ve kabul gören bir duruma beklenmedik ama sıradanve hatta eski bir şeyler ekleyerek neleri nasıl değiştirebilirdin?\"},\n  {title:\"Kintsukuroi\", description:\"Japonlar, 'eşya kırılınca daha değerli olur' düşüncesiyle parçalanmış tabak ve çömleklerini altın ile bir araya getiriyorlar. Problemleri ne şekilde çözerek daha güçlü ve vazgeçilmez bir deneyim yaratabilirsin?\"},\n  ];\n\nconst myShakeEvent = new Shake({\n    threshold: 15, // optional shake strength threshold\n    timeout: 1000 // optional, determines the frequency of event generation\n});\n\n function shuffle(inputArray) {\n  var input = inputArray;\n   \n  for (var i = input.length-1; i >=0; i--) {\n   \n      var randomIndex = Math.floor(Math.random()*(i+1)); \n      var itemAtIndex = input[randomIndex]; \n       \n      input[randomIndex] = input[i]; \n      input[i] = itemAtIndex;\n  }\n  return input;\n}\n\nclass App extends Component {\n  constructor(props) {\n        super(props);\n        this.state = {\n          currentArray: blueCard,\n          tick: 0,\n        };\n      myShakeEvent.start();\n  }\n\n  componentDidMount() {\n      window.addEventListener('shake', () => this.shakeEventDidOccur(), false);\n  }\n\n  componentWillUnmount(){\n      window.removeEventListener('shake', () => this.shakeEventDidOccur(), false);\n      myShakeEvent.stop();\n  }\n\n  shakeEventDidOccur() {\n      if (this.state.tick === this.state.currentArray.length - 1){\n          this.setState({\n              tick: 0\n          });\n          return alert(\"You have reached the end of the cards\");\n      }\n\n      this.setState({\n          tick: this.state.tick + 1\n      });\n  }\n\n\n  cardClick(color){\n    if (color === \"pink\"){\n        this.setState({\n            currentArray: shuffle(pinkCard),\n            tick: 0\n        });\n    } else if (color === \"orange\"){\n        this.setState({\n            currentArray: shuffle(greenCard),\n            tick: 0\n        });\n    } else if (color === \"blue\") {\n        this.setState({\n            currentArray: shuffle(blueCard),\n            tick: 0\n        });\n    }\n  \n  }\n\n  buttonClick(){\n      if (this.state.tick === this.state.currentArray.length - 1){\n          this.setState({\n              tick: 0\n          });\n          return alert(\"You have reached the end of the cards\");\n      }\n\n      this.setState({\n          tick: this.state.tick + 1\n      });\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"box-container\">\n            <button onClick={() => this.cardClick(\"pink\")} className=\"box\" id=\"pink\">Araştırma\n            </button>\n            <button onClick={() => this.cardClick(\"blue\")} className=\"box\" id=\"blue\">Analiz\n            </button>\n            <button onClick={() => this.cardClick(\"orange\")} className=\"box\" id=\"orange\">Sentez\n            </button>\n          </div>\n          <div className=\"displayed-card\">\n            <p className=\"title\">{this.state.currentArray[this.state.tick].title}</p>\n            <p className=\"description\">{this.state.currentArray[this.state.tick].description}</p>\n          </div>\n          <button className=\"shake-button\" onClick={() => this.buttonClick()}>Shake!</button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}